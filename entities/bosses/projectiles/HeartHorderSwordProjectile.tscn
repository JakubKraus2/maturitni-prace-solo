[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/heart_horder_sword_projectile.png" type="Texture" id=1]
[ext_resource path="res://assets/heartHorder_spawn_sword_explosion.png" type="Texture" id=2]
[ext_resource path="res://entities/bosses/projectiles/Hitbox.gd" type="Script" id=3]
[ext_resource path="res://assets/AUDIO/sounds/boss/Heart Horder/boss_heart_horder_spawn_sword.ogg" type="AudioStream" id=4]

[sub_resource type="GDScript" id=2]
script/source = "extends KinematicBody2D


var speed = -500
var velocity = Vector2(0, 0)
var direction

var attack_knock_back_power = 200

func _ready() -> void:
	$AnimationPlayer.play(\"SPAWN\")
	set_physics_process(false)

func _physics_process(delta: float) -> void:
	translate(direction*delta*speed)

func start():
	direction = (global_position - SwordsMaster.global_position).normalized()
	global_rotation = direction.angle() + PI / 2.0
	set_physics_process(true)

func set_camera_shake(var shake_power):
	SwordsMaster.shake_power = shake_power


func _on_Hitbox_area_entered(area: Area2D) -> void:
	if area.get_parent().invincibility_timer.time_left == 0: #cant be damaged twice in certain period of time
		area.get_parent().attacking = true #player cant move
		area.get_parent().animation_player.play(\"HURT\") #play hurt anim
		area.get_parent().invincibility_timer.start() #start the invincibility timer
		PlayerBasicData.current_lives -= 1 #damage
		area.get_parent().die() #check if player is dead


func _on_Timer_timeout() -> void:
	queue_free()
"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 2, 13 )

[sub_resource type="Animation" id=3]
resource_name = "SPAWN"
length = 0.6
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("BigCircle:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0.3, 0.3 ), Vector2( 0.4, 0.4 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SmallCircle:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0.09, 0.09 ), Vector2( 0.13, 0.13 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("BigCircle:self_modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.05, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("SmallCircle:self_modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.05, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Hitbox:scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.05, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, 0 ), Vector2( 1, 1 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("Hitbox:modulate")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.05, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Hitbox:rotation_degrees")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0 ]
}
tracks/7/type = "method"
tracks/7/path = NodePath(".")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0, 0.1, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"values": [ {
"args": [ 3 ],
"method": "set_camera_shake"
}, {
"args": [ 0 ],
"method": "set_camera_shake"
}, {
"args": [  ],
"method": "start"
} ]
}
tracks/8/type = "method"
tracks/8/path = NodePath("SpawnSwordSound")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ 0.0 ],
"method": "play"
} ]
}

[node name="HeartHorderSwordProjectile" type="KinematicBody2D"]
scale = Vector2( 1.5, 1.5 )
script = SubResource( 2 )

[node name="Hitbox" type="Area2D" parent="." groups=["attack"]]
modulate = Color( 1, 1, 1, 0 )
scale = Vector2( 1e-05, 1e-05 )
collision_layer = 0
script = ExtResource( 3 )

[node name="Sprite" type="Sprite" parent="Hitbox"]
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hitbox"]
position = Vector2( 0, 2.66667 )
shape = SubResource( 1 )

[node name="BigCircle" type="Sprite" parent="."]
scale = Vector2( 1e-05, 1e-05 )
texture = ExtResource( 2 )

[node name="SmallCircle" type="Sprite" parent="."]
scale = Vector2( 1e-05, 1e-05 )
texture = ExtResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/SPAWN = SubResource( 3 )

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0
autostart = true

[node name="SpawnSwordSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 4 )

[connection signal="area_entered" from="Hitbox" to="." method="_on_Hitbox_area_entered"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
